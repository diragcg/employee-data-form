<!DOCTYPE html>
<html lang="hi">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>District — Data Entry</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/dist/umd/supabase.js"></script>
  <style>
    body { font-family: 'Mukta', system-ui, -apple-system, "Segoe UI", Roboto, Arial; background:#f7fafc; }
    .container { max-width:1000px; margin:84px auto; }
    .card-sm { border-radius:10px; box-shadow:0 8px 30px rgba(2,6,23,0.06); background:#fff; padding:18px; }
    .hidden { display:none !important; }
  </style>
</head>
<body>
  <div class="container">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h3>District Data Entry</h3>
      <div>
        <button id="btnLogout" class="btn btn-outline-secondary">Logout</button>
      </div>
    </div>

    <div id="alertArea"></div>

    <div class="card-sm mb-3">
      <h5>Available Forms</h5>
      <div id="formsList" class="list-group mt-2"></div>
    </div>

    <div id="formCard" class="card-sm mb-3 hidden">
      <h5 id="formLabel"></h5>
      <form id="entryForm"></form>
      <div class="mt-3 text-end">
        <button id="saveBtn" class="btn btn-success">Save Entry</button>
      </div>
    </div>
  </div>

<script>
/* ---------------- CONFIG: Replace keys before production ---------------- */
const SUPABASE_URL = 'https://txjbfqrbbtvzlxpeegkv.supabase.co';
const SUPABASE_KEY = 'eyJhbGci...'; // Use appropriate anon key for client or better use Supabase Auth in production
const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_KEY);

/* ---------------- Helpers ---------------- */
const $ = id => document.getElementById(id);
function showMessage(msg, type='info') { $('alertArea').innerHTML = `<div class="alert alert-${type}">${msg}</div>`; setTimeout(()=> $('alertArea').innerHTML='', 5000); }
function getCurrentUser() { const s = localStorage.getItem('user') || sessionStorage.getItem('user'); return s ? JSON.parse(s) : null; }

/* ---------------- Init & auth guard ---------------- */
document.addEventListener('DOMContentLoaded', async () => {
  const user = getCurrentUser();
  if (!user) { alert('Please login first'); location.href = 'login.html'; return; }
  // District user may also be admin; but admin cannot use this page to create forms
  loadFormDefinitions();
});

/* ---------------- Logout ---------------- */
$('btnLogout').addEventListener('click', ()=> { localStorage.removeItem('user'); sessionStorage.removeItem('user'); location.href = 'login.html'; });

/* ---------------- Load form_definitions and render list ---------------- */
async function loadFormDefinitions() {
  try {
    const { data, error } = await supabase.from('form_definitions').select('*').order('created_at', { ascending: false });
    if (error) throw error;
    renderFormList(data || []);
  } catch (err) {
    console.error(err); showMessage('Failed to load forms: ' + (err.message || err), 'danger');
  }
}

function renderFormList(list) {
  const target = $('formsList'); target.innerHTML = '';
  if (!list.length) { target.innerHTML = '<div class="text-muted">No forms available</div>'; return; }
  list.forEach(def => {
    const item = document.createElement('button');
    item.type = 'button';
    item.className = 'list-group-item list-group-item-action';
    item.textContent = `${def.table_name} — ${(def.fields||[]).length} fields`;
    item.dataset.table = def.table_name;
    item.addEventListener('click', () => openForm(def.table_name));
    target.appendChild(item);
  });
}

/* ---------------- Open form: fetch definition and render blank fillable form (no file data inserted) ---------------- */
let currentDefinition = null;
async function openForm(tableName) {
  try {
    const { data, error } = await supabase.from('form_definitions').select('*').eq('table_name', tableName).single();
    if (error || !data) throw error || new Error('Definition not found');
    currentDefinition = data;
    renderBlankForm(data);
  } catch (err) {
    console.error(err); showMessage('Unable to open form: ' + (err.message || err), 'danger');
  }
}

function renderBlankForm(def) {
  $('formLabel').textContent = def.label || def.table_name;
  const form = $('entryForm'); form.innerHTML = '';
  (def.fields || []).forEach((f,i) => {
    const wrapper = document.createElement('div'); wrapper.className = 'mb-2';
    const label = document.createElement('label'); label.className = 'form-label'; label.textContent = f.label || f.name;
    const input = document.createElement('input'); input.className = 'form-control'; input.name = f.name; input.type = 'text';
    wrapper.appendChild(label); wrapper.appendChild(input);
    form.appendChild(wrapper);
  });
  $('formCard').classList.remove('hidden');
  window.scrollTo({ top: 0, behavior: 'smooth' });
}

/* ---------------- Save record (manual entry) ---------------- */
$('saveBtn').addEventListener('click', async () => {
  if (!currentDefinition) return showMessage('Select a form first', 'warning');
  const payload = {};
  $('entryForm').querySelectorAll('input').forEach(i => payload[i.name] = i.value === '' ? null : i.value);

  // Attach district_id automatically if current user has one and column exists
  const user = getCurrentUser();
  if (user && user.districtId && Object.keys(payload).includes('district_id')) payload['district_id'] = user.districtId;

  try {
    const { error } = await supabase.from(currentDefinition.table_name).insert([payload]);
    if (error) throw error;
    showMessage('Record saved', 'success');
    $('entryForm').querySelectorAll('input').forEach(i => i.value = '');
  } catch (err) {
    console.error(err); showMessage('Save failed: ' + (err.message || err), 'danger');
  }
});

/* ---------------- End ---------------- */
</script>
</body>
</html>
